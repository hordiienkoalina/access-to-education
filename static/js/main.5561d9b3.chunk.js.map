{"version":3,"sources":["components/OverlayButtons.js","components/Legend.js","components/Map.js","config/config.js","components/Footer.js","components/Header.js","components/Subheader.js","components/Popup.js","App.js","index.js"],"names":["OverlayButtons","_ref","onButtonClick","onLayerChange","activeButton","setActiveButton","useState","handleClick","type","React","createElement","className","onClick","Legend","colors","labels","gradient","Array","isArray","filter","value","startsWith","join","console","log","style","background","map","label","index","key","mapboxgl","accessToken","Map","Component","constructor","props","super","addMapControls","addControl","NavigationControl","geocoder","MapboxGeocoder","countries","placeholder","zoom","marker","on","event","flyTo","center","result","addMapClickHandler","e","this","handleMapClick","activeVariable","colorScales","state","coordinates","lngLat","properties","features","popupContent","races","name","percentage","pct_white","colorClass","pct_black","pct_indigenous","pct_asian","pct_pardos","sort","a","b","forEach","race","undefined","toFixed","malePercentage","pct_men","femalePercentage","stateName","name_state","stateCode","state_id","abbrev_state","cityName","city_name","name_muni","code_muni","censusTract","sector_id","avgMonthlyEarnings","formatNumber","avg_monthly_earnings","avgMonthlyEarningsDollars","avg_monthly_earnings_dollars","population","n_people_15to17","isNaN","percentileValue","Math","round","layerName","colorValue","getColorForValue","percentileRank","rank","formatPercentileRank","locationLine","Boolean","popup","remove","newPopup","Popup","closeButton","setLngLat","setHTML","addTo","selectedFeature","id","setState","removeHighlight","highlightFeature","num","toLocaleString","colorScale","length","error","stops","stop","color","i","t","interpolatedColor","interpolateColor","warn","color1","color2","factor","c1","hexToRgb","c2","r","g","rgbToHex","hex","bigint","parseInt","slice","rgb","toString","toUpperCase","getSource","addSource","data","addLayer","source","paint","highlightData","setData","initializeColorScales","colorValues","H_percentile","Q_percentile","A_percentile","P_percentile","avg_monthly_earnings_percentile","pct_men_percentile","majority_race","colorStops","Object","keys","createColorScale","mapVariable","colorArray","initializeMapLayers","addMapSourcesAndLayers","setupMapLayers","layout","getFirstSymbolLayerId","minzoom","zoomThreshold","maxzoom","getFirstLineLayerId","layers","getStyle","updateMapLayers","layerTypes","colorMap","layerId","getLayer","setPaintProperty","handleButtonClick","newActiveVariable","Access","Quality","Population","Income","Gender","Race","newLabels","mapContainer","createRef","componentDidMount","container","current","minZoom","maxZoom","maxBounds","getZoom","componentDidUpdate","prevProps","prevState","render","ref","height","Footer","href","target","rel","Header","Subheader","title","description","onClose","dontShowAgain","setDontShowAgain","handleClose","localStorage","setItem","onChange","checked","htmlFor","App","selectedLayer","setSelectedLayer","isPopupVisible","setIsPopupVisible","useEffect","getItem","layer","handleClosePopup","document","getElementById","createRoot"],"mappings":"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","file":"static/js/main.5561d9b3.chunk.js","sourcesContent":["import React, { useState } from 'react'; // Import React library and useState hook\nimport './OverlayButtons.css'; // Import CSS for overlay buttons\n\nfunction OverlayButtons({ onButtonClick, onLayerChange }) {\n    const [activeButton, setActiveButton] = useState('Access-Quality'); // Initialize state for the active button\n\n    const handleClick = (type) => {\n        setActiveButton(type); // Update the active button state\n        onButtonClick(type); // Call the onButtonClick function passed as a prop\n    };\n\n    return (\n    <div className=\"overlay-buttons\">\n        <button \n        className={`overlay-button ${activeButton === 'Access-Quality' ? 'active' : ''}`} \n        onClick={() => handleClick('Access-Quality')}\n        >\n        Access-Quality\n        </button>\n        <button \n        className={`overlay-button ${activeButton === 'Quality' ? 'active' : ''}`} \n        onClick={() => handleClick('Quality')}\n        >\n        Quality\n        </button>\n        <button \n        className={`overlay-button ${activeButton === 'Access' ? 'active' : ''}`} \n        onClick={() => handleClick('Access')}\n        >\n        Access\n        </button>\n        <button \n        className={`overlay-button ${activeButton === 'Income' ? 'active' : ''}`} \n        onClick={() => handleClick('Income')}\n        >\n        Income\n        </button>\n        <button \n        className={`overlay-button ${activeButton === 'Gender' ? 'active' : ''}`} \n        onClick={() => handleClick('Gender')}\n        >\n        Gender\n        </button>\n        <button \n        className={`overlay-button ${activeButton === 'Race' ? 'active' : ''}`} \n        onClick={() => handleClick('Race')}\n        >\n        Race\n        </button>\n    </div>\n    );\n}\n\nexport default OverlayButtons; // Export the OverlayButtons component as the default export","import React from 'react';\nimport './Legend.css';\n\nconst Legend = ({ colors, labels }) => {\n    // Ensure colors is defined and is an array\n    const colorValues = Array.isArray(colors) ? colors.filter(value => typeof value === 'string' && value.startsWith('#')) : [];\n    const gradient = `linear-gradient(to right, ${colorValues.join(', ')})`;\n    console.log('Generated gradient:', gradient); // Debug log\n\n    return (\n        <div className=\"legend-container\">\n            <div className=\"legend-scale\" style={{ background: gradient }} />\n            <div className=\"legend-labels\">\n                {labels.map((label, index) => (\n                    <span key={index}>{label}</span>\n                ))}\n            </div>\n        </div>\n    );\n};\n\nexport default Legend;\n","// Importing necessary libraries and components\nimport React, { Component } from 'react';\nimport mapboxgl from 'mapbox-gl';\nimport MapboxGeocoder from '@mapbox/mapbox-gl-geocoder';\nimport OverlayButtons from './OverlayButtons';\nimport Legend from './Legend';\nimport { MAPBOX_ACCESS_TOKEN } from '../config/config';\nimport './Map.css';\nimport '@mapbox/mapbox-gl-geocoder/dist/mapbox-gl-geocoder.css';\n\nmapboxgl.accessToken = MAPBOX_ACCESS_TOKEN; // Set the Mapbox access token\n\nclass Map extends Component {\n  constructor(props) {\n    super(props); // Call the constructor of the parent class (Component)\n    this.state = {\n      map: null,\n      activeVariable: 'H_percentile',\n      colorScales: this.initializeColorScales(),\n      colors: this.initializeColorScales()['H_percentile'], // Set initial color scale\n      labels: ['Scarce', 'Adequate'], // Default labels\n      selectedFeature: null,\n      popup: null,\n    };    \n    this.mapContainer = React.createRef(); // Reference to the map container element\n    this.zoomThreshold = 5; // Zoom level threshold for switching layers\n  }\n\n  // Lifecycle method called after the component is mounted\n  componentDidMount() {\n    const map = new mapboxgl.Map({\n      container: this.mapContainer.current, // HTML container ID\n      style: 'mapbox://styles/felipehlvo/cltz1z7gn00pw01qu2xm23yjs', // Map style\n      center: [-46.63, -23.6], // Initial map center coordinates\n      zoom: 7, // Initial zoom level\n      minZoom: 5, // Minimum zoom level\n      maxZoom: 12, // Maximum zoom level\n      maxBounds: [[-74.5, -33.5], [-34.5, 5.5]], // Restrict map to Brazil\n    });\n\n    // Event listener for when the map has loaded\n    map.on('load', () => {\n      this.setState({ map }, () => {\n        this.initializeMapLayers(); // Initialize map layers and sources\n        this.addMapControls(map); // Add navigation and geocoder controls\n        this.addMapClickHandler(map); // Add click handlers for map layers\n\n        console.log('Map has loaded.');\n        console.log('Current map style:', map.getStyle());\n        console.log('Current zoom level:', map.getZoom());\n      });\n    });\n  }\n\n  // Method to add map controls\n  addMapControls = (map) => {\n    // Add default navigation controls (zoom buttons)\n    map.addControl(new mapboxgl.NavigationControl(), 'top-left');\n\n    const geocoder = new MapboxGeocoder({\n      accessToken: mapboxgl.accessToken, // Access token for geocoder\n      mapboxgl: mapboxgl, // Reference to mapboxgl library\n      countries: 'br', // Limit search to Brazil\n      placeholder: 'Search', // Placeholder text in the search box\n      zoom: 10, // Zoom level when a search result is selected\n      marker: false, // Do not add a marker for the search result\n    });\n\n    // Event listener for search results\n    geocoder.on('result', (event) => {\n      map.flyTo({\n        center: event.result.center, // Center the map at the result's coordinates\n        zoom: 10, // Set the zoom level\n      });\n    });\n\n    map.addControl(geocoder, 'top-right'); // Add the geocoder control to the top-right corner of the map\n  };\n\n  // Method to add click handler for the map\n  addMapClickHandler = (map) => {\n    map.on('click', 'brazil-microregion-layer', (e) => {\n      console.log('Microregion layer clicked');\n      this.handleMapClick(e); // Handle click event for microregion layer\n    });\n\n    map.on('click', 'brazil-municipality-layer', (e) => {\n      console.log('Municipality layer clicked');\n      this.handleMapClick(e); // Handle click event for municipality layer\n    });\n\n    map.on('click', 'brazil-point-layer', (e) => {\n      console.log('Point layer clicked');\n      this.handleMapClick(e); // Handle click event for point layer\n    });\n\n    map.on('click', 'brazil-polygon-layer', (e) => {\n      console.log('Polygon layer clicked');\n      this.handleMapClick(e); // Handle click event for polygon layer\n    });\n  };\n\n  handleMapClick = (e) => {\n    const { activeVariable, colorScales } = this.state;\n    const coordinates = e.lngLat;\n    const properties = e.features[0].properties;\n  \n    console.log('Active variable:', activeVariable);\n    console.log('Properties of clicked feature:', properties);\n  \n    let popupContent = `<div class=\"popup-container\"><div style=\"flex: 1;\">`;\n  \n    if (activeVariable === 'majority_race') {\n      const races = [\n        { name: 'White', percentage: properties.pct_white, colorClass: 'progress-bar-white' },\n        { name: 'Black', percentage: properties.pct_black, colorClass: 'progress-bar-black' },\n        { name: 'Indigenous', percentage: properties.pct_indigenous, colorClass: 'progress-bar-indigenous' },\n        { name: 'Asian', percentage: properties.pct_asian, colorClass: 'progress-bar-asian' },\n        { name: 'Parda', percentage: properties.pct_pardos, colorClass: 'progress-bar-pardos' }\n      ];\n  \n      races.sort((a, b) => (b.percentage || 0) - (a.percentage || 0));\n  \n      races.forEach(race => {\n        const percentage = race.percentage !== undefined ? (race.percentage * 100).toFixed(1) : 'Data Unavailable';\n        popupContent += `\n          <p style=\"margin: 0; line-height: 2; color: #000;\">${percentage}%<strong> ${race.name}</strong> </p>\n          <div class=\"progress-container\">\n            <div class=\"progress-bar ${race.colorClass}\" style=\"width: ${race.percentage * 100}%;\"></div>\n          </div>\n        `;\n      });\n\n      popupContent += `<div style=\"height: 5px;\"></div>\n      <div class=\"line-divider\"></div>`;\n\n    } else if (activeVariable === 'pct_men_percentile') {\n      const malePercentage = properties.pct_men !== undefined ? (properties.pct_men * 100).toFixed(1) : 'Data Unavailable';\n      const femalePercentage = 1 - properties.pct_men !== undefined ? ([1 - properties.pct_men] * 100).toFixed(1) : 'Data Unavailable';\n  \n      popupContent += `\n        <p style=\"margin: 0; line-height: 2; color: #000;\">${malePercentage}%<strong> Male</strong></p>\n        <div class=\"progress-container\">\n          <div class=\"progress-bar progress-bar-male\" style=\"width: ${properties.pct_men * 100}%;\"></div>\n        </div>\n        <p style=\"margin: 0; line-height: 2; color: #000;\">${femalePercentage}%<strong> Female</strong> </p>\n        <div class=\"progress-container\">\n          <div class=\"progress-bar progress-bar-female\" style=\"width: ${[1 - properties.pct_men] * 100}%;\"></div>\n        </div>\n        <div style=\"height: 5px;\"></div>\n        <div class=\"line-divider\"></div>\n      `;\n    }\n  \n    const stateName = properties.name_state;\n    const stateCode = properties.state_id || properties.abbrev_state;\n    const cityName = properties.city_name || properties.name_muni || properties.code_muni;\n    const censusTract = properties.sector_id;\n    const avgMonthlyEarnings = this.formatNumber(properties.avg_monthly_earnings);\n    const avgMonthlyEarningsDollars = this.formatNumber(properties.avg_monthly_earnings_dollars);\n    const population = this.formatNumber(properties.n_people_15to17);\n  \n    if (activeVariable !== 'pct_men_percentile' && activeVariable !== 'majority_race') {\n      const value = properties[activeVariable];\n      if (value === undefined || isNaN(value)) {\n        popupContent += `<strong style=\"font-size: 16px; line-height: 2\">Data Unavailable</strong>`;\n        popupContent += `<div class=\"line-divider\"></div>`;\n      } else {\n        const percentileValue = properties[activeVariable];\n        const percentage = Math.round(percentileValue * 100);\n        const layerNameMap = {\n          'A_percentile': 'Access',\n          'Q_percentile': 'Quality',\n          'H_percentile': 'Access-Quality',\n          'P_percentile': 'Population',\n          'avg_monthly_earnings_percentile': 'Income',\n          'pct_men_percentile': 'Gender',\n          'majority_race': 'Race'\n        };\n        const layerName = layerNameMap[activeVariable];\n        const colorValue = this.getColorForValue(colorScales[activeVariable], percentileValue);\n  \n        const formatPercentileRank = (rank) => {\n          if (rank > 10 && rank < 20) return `${rank}th`;\n          const lastDigit = rank % 10;\n          switch (lastDigit) {\n            case 1: return `${rank}st`;\n            case 2: return `${rank}nd`;\n            case 3: return `${rank}rd`;\n            default: return `${rank}th`;\n          }\n        };\n  \n        const percentileRank = formatPercentileRank(percentage);\n  \n        popupContent += `<span class=\"color-box\" style=\"background-color: ${colorValue};\"></span>`;\n        popupContent += `<strong class=\"percentile-text\">${percentileRank}</strong> <span class=\"percentile-text\">${layerName} Percentile</span>`;\n        popupContent += `<div class=\"line-divider\"></div>`;\n      }\n    }\n  \n    if (censusTract) popupContent += `<p style=\"margin: 0px; line-height: 2;\">Tract <strong>${censusTract}</strong></p>`;\n    const locationLine = [cityName, stateName ? `${stateName} (${stateCode})` : null].filter(Boolean).join(', ');\n    if (locationLine) popupContent += `<p style=\"margin: 0; line-height: 2;\"><em>${locationLine}</em></p>`;\n    if (population) popupContent += `<p style=\"margin: 0; line-height: 2;\"><strong># of Schoolchildren:</strong> ${population}</p>`;\n    if (avgMonthlyEarnings) popupContent += `<p style=\"margin: 0; line-height: 2;\"><strong>Avg Monthly Income:</strong> R$${avgMonthlyEarnings} ≈ US$${avgMonthlyEarningsDollars}</p>`;\n  \n    popupContent += `</div></div>`;\n  \n    if (this.state.popup) {\n      this.state.popup.remove();\n    }\n  \n    const newPopup = new mapboxgl.Popup({ closeButton: false })\n      .setLngLat(coordinates)\n      .setHTML(popupContent)\n      .addTo(this.state.map);\n  \n    if (this.state.selectedFeature && this.state.selectedFeature.id === e.features[0].id) {\n      this.setState({ selectedFeature: null, popup: null }, () => {\n        this.removeHighlight();\n        newPopup.remove();\n      });\n    } else {\n      this.setState({ selectedFeature: e.features[0], popup: newPopup }, () => {\n        this.highlightFeature();\n      });\n    }\n  };  \n\n  // Method to format numbers with commas\n  formatNumber = (num) => {\n    if (num == null) {\n        return 'Data Unavailable';\n    }\n    return Math.round(num).toLocaleString();\n  };\n\n  // Method to get color for a value based on color scale\n  getColorForValue = (colorScale, value) => {\n    if (!Array.isArray(colorScale) || colorScale.length < 6) {\n      console.error('Invalid color scale format', colorScale);\n      return '#000000'; // Fallback color\n    }\n\n    const stops = [\n      { stop: 0, color: colorScale[4] },\n      { stop: 0.25, color: colorScale[6] },\n      { stop: 0.5, color: colorScale[8] },\n      { stop: 0.75, color: colorScale[10] },\n      { stop: 1, color: colorScale[12] },\n    ];\n  \n    console.log('stops:', stops); // Add this log\n  \n    // Find the correct color range for the value\n    for (let i = 0; i < stops.length - 1; i++) {\n      console.log(`Checking if ${value} is between ${stops[i].stop} and ${stops[i + 1].stop}`); // Add this log\n      if (value >= stops[i].stop && value <= stops[i + 1].stop) {\n        const t = (value - stops[i].stop) / (stops[i + 1].stop - stops[i].stop);\n        const interpolatedColor = this.interpolateColor(stops[i].color, stops[i + 1].color, t);\n        console.log('Interpolating between', stops[i].color, 'and', stops[i + 1].color, 'with factor', t, 'result:', interpolatedColor); // Add this log\n        return interpolatedColor;\n      }\n    }\n  \n    // If value is not in any range, return the last color\n    console.warn('Value out of range, using last color', stops[stops.length - 1].color); // Add this log\n    return stops[stops.length - 1].color;\n  };\n\n  // Method to interpolate between two colors\n  interpolateColor = (color1, color2, factor) => {\n    const c1 = this.hexToRgb(color1);\n    const c2 = this.hexToRgb(color2);\n    const result = {\n      r: Math.round(c1.r + factor * (c2.r - c1.r)),\n      g: Math.round(c1.g + factor * (c2.g - c1.g)),\n      b: Math.round(c1.b + factor * (c2.b - c1.b))\n    };\n    return this.rgbToHex(result); // Convert the interpolated RGB to HEX\n  };\n\n  // Method to convert hex color to RGB\n  hexToRgb = (hex) => {\n    if (typeof hex !== 'string') {\n      console.error('Invalid hex color format', hex);\n      return { r: 0, g: 0, b: 0 }; // Fallback color\n    }\n    const bigint = parseInt(hex.slice(1), 16);\n    return {\n      r: (bigint >> 16) & 255,\n      g: (bigint >> 8) & 255,\n      b: (bigint & 255)\n    };\n  };\n\n  // Method to convert RGB color to hex\n  rgbToHex = (rgb) => {\n    return `#${((1 << 24) + (rgb.r << 16) + (rgb.g << 8) + rgb.b).toString(16).slice(1).toUpperCase()}`;\n  };\n\n  // Method to highlight a map feature\n  highlightFeature = () => {\n    const { map, selectedFeature } = this.state;\n\n    if (!map.getSource('highlight-source')) {\n      map.addSource('highlight-source', {\n        type: 'geojson',\n        data: {\n          type: 'FeatureCollection',\n          features: [],\n        },\n      });\n\n      map.addLayer({\n        id: 'highlight-layer',\n        type: 'line',\n        source: 'highlight-source',\n        paint: {\n          'line-color': '#000000',\n          'line-width': 2,\n        },\n      });\n    }\n\n    if (selectedFeature) {\n      const highlightData = {\n        type: 'FeatureCollection',\n        features: [selectedFeature],\n      };\n\n      map.getSource('highlight-source').setData(highlightData); // Update the highlight source with the selected feature\n    }\n  };\n\n  // Method to remove highlight from map features\n  removeHighlight = () => {\n    const { map } = this.state;\n    const highlightData = {\n      type: 'FeatureCollection',\n      features: [],\n    };\n\n    if (map.getSource('highlight-source')) {\n      map.getSource('highlight-source').setData(highlightData); // Clear the highlight source data\n    }\n  };\n\n  // Method to initialize color scales for different variables\n  initializeColorScales = () => {\n    const colorValues = {\n      H_percentile: ['#e8d893', '#b8d993', '#40b5c4', '#2567ad', '#152774'],\n      Q_percentile: ['#f9b9c3', '#ee89ae', '#d41ac0', '#78106d', '#49006a'],\n      A_percentile: ['#ece99d', '#b4c689', '#87b034', '#11692b', '#263021'],\n      P_percentile: ['#f7fcb9', '#addd8e', '#31a354', '#006837', '#004529'],\n      avg_monthly_earnings_percentile: ['#fff9c7', '#f7cd86', '#fec561', '#da5b09', '#8a3006'],\n      pct_men_percentile: ['#d41ac0', '#e1a7be', '#fbf4ff', '#8caac2', '#083d7f'],\n      majority_race: ['#3babfb', '#7ce35c', '#c9d662', '#366d7b', '#cd5468'],\n    };\n\n    const colorStops = {\n      A_percentile: [0, 0.25, 0.5, 0.75, 1],\n      Q_percentile: [0, 0.25, 0.5, 0.75, 1],\n      H_percentile: [0, 0.25, 0.5, 0.75, 1],\n      P_percentile: [0, 0.25, 0.5, 0.75, 1],\n      avg_monthly_earnings_percentile: [0, 0.25, 0.5, 0.75, 1],\n      pct_men_percentile: [0, 0.25, 0.5, 0.75, 1],\n      majority_race: [0, 0.25, 0.5, 0.75, 1],\n    };\n    \n    let colorScales = {}; // Object to hold the color scales\n    Object.keys(colorValues).forEach((key) => {\n      colorScales[key] = this.createColorScale(key, colorValues[key], colorStops[key]);\n    });\n    console.log('Initialized color scales:', colorScales); // Add this log\n    return colorScales;\n  };\n\n  // Method to create a color scale for a variable\n  createColorScale = (mapVariable, colorArray, colorStops) => {\n    const colorScale = [\n      'interpolate',\n      ['linear'],\n      ['get', mapVariable],\n      colorStops[0], colorArray[0],\n      colorStops[1], colorArray[1],\n      colorStops[2], colorArray[2],\n      colorStops[3], colorArray[3],\n      colorStops[4], colorArray[4],\n    ];\n    console.log(`Color scale for ${mapVariable}:`, colorScale); // Add this log\n    return colorScale;\n  };\n\n  // Method to initialize map layers\n  initializeMapLayers = () => {\n    const map = this.state.map;\n    this.addMapSourcesAndLayers(map); // Add map sources and layers\n  };\n\n  // Method to add sources and layers to the map\n  addMapSourcesAndLayers = (map) => {\n    map.addSource('brazil-state-data', {\n      type: 'geojson',\n      data: 'https://storage.googleapis.com/atlas-educacao-data/access_data_state.geojson',\n    });\n    map.addSource('brazil-microregion-data', {\n      type: 'geojson',\n      data: 'https://storage.googleapis.com/atlas-educacao-data/access_data_microregion.geojson',\n    });\n    map.addSource('brazil-municipality-data', {\n      type: 'geojson',\n      data: 'https://storage.googleapis.com/atlas-educacao-data/access_data_municipality.geojson',\n    });\n    map.addSource('brazil-point-data', {\n      type: 'geojson',\n      data: 'https://storage.googleapis.com/atlas-educacao-data/access_data_points.geojson',\n    });\n    map.addSource('brazil-polygon-data', {\n      type: 'geojson',\n      data: 'https://storage.googleapis.com/atlas-educacao-data/access_data_polygons.geojson',\n    });\n\n    this.setupMapLayers(map); // Setup map layers\n  };\n\n  // Method to setup map layers\n  setupMapLayers = (map) => {\n    const { colorScales, activeVariable } = this.state;\n\n    map.addLayer(\n      {\n        id: 'brazil-state-border',\n        type: 'line',\n        source: 'brazil-state-data',\n        layout: {},\n        paint: {\n          'line-color': '#000000',\n          'line-width': 1.5,\n        },\n      },\n      this.getFirstSymbolLayerId(map) // Ensure this layer is below any symbol layers\n    );\n\n    map.addLayer(\n      {\n        id: 'brazil-microregion-layer',\n        type: 'fill',\n        source: 'brazil-microregion-data',\n        minzoom: this.zoomThreshold - 1,\n        maxzoom: this.zoomThreshold + 1,\n        layout: {},\n        paint: {\n          'fill-color': colorScales[activeVariable],\n          'fill-opacity': 1,\n        },\n      },\n      'brazil-state-border'\n    );\n\n    map.addLayer(\n      {\n        id: 'brazil-municipality-layer',\n        type: 'fill',\n        source: 'brazil-municipality-data',\n        minzoom: this.zoomThreshold,\n        maxzoom: this.zoomThreshold + 3,\n        layout: {},\n        paint: {\n          'fill-color': colorScales[activeVariable],\n          'fill-opacity': 1,\n        },\n      },\n      'brazil-microregion-layer'\n    );\n\n    map.addLayer(\n      {\n        id: 'brazil-point-layer',\n        type: 'circle',\n        source: 'brazil-point-data',\n        minzoom: this.zoomThreshold + 3,\n        paint: {\n          'circle-color': colorScales[activeVariable],\n          'circle-radius': ['interpolate', ['linear'], ['zoom'], 8, 1.5, 13, 5],\n          'circle-blur': ['interpolate', ['linear'], ['zoom'], 8, 1, 13, 0],\n          'circle-opacity': 0.75,\n        },\n      },\n      this.getFirstLineLayerId(map)\n    );\n\n    map.addLayer(\n      {\n        id: 'brazil-polygon-layer',\n        type: 'fill',\n        source: 'brazil-polygon-data',\n        minzoom: this.zoomThreshold + 3,\n        layout: {},\n        paint: {\n          'fill-color': colorScales[activeVariable],\n          'fill-opacity': 0.2,\n        },\n      },\n      'brazil-municipality-layer'\n    );\n  };\n\n  // Method to get the first symbol layer ID\n  getFirstSymbolLayerId = (map) => {\n    const layers = map.getStyle().layers;\n    for (let i = 0; i < layers.length; i++) {\n      if (layers[i].type === 'symbol') {\n        return layers[i].id;\n      }\n    }\n    return undefined;\n  };\n\n  // Method to get the first line layer ID\n  getFirstLineLayerId = (map) => {\n    const layers = map.getStyle().layers;\n    for (let i = 0; i < layers.length; i++) {\n      if (layers[i].type === 'line') {\n        return layers[i].id;\n      }\n    }\n    return undefined;\n  };\n\n  // Lifecycle method called when the component is updated\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.activeVariable !== this.state.activeVariable) {\n      console.log('Active variable changed from', prevState.activeVariable, 'to', this.state.activeVariable); // Add this log\n      this.updateMapLayers(); // Update map layers if the active variable changes\n    }\n  }\n\n  // Method to update map layers\n// Method to update map layers\nupdateMapLayers = () => {\n  const { map, colorScales, activeVariable } = this.state;\n  if (!map) return;\n\n  console.log('Updating map layers for activeVariable:', activeVariable); // Add this log\n  console.log('Color scale being applied:', colorScales[activeVariable]); // Add this log\n\n  const layerTypes = {\n    'brazil-microregion-layer': 'fill-color',\n    'brazil-municipality-layer': 'fill-color',\n    'brazil-point-layer': 'circle-color',\n    'brazil-polygon-layer': 'fill-color',\n  };\n\n  const colorMap = {\n    'n_people_15to17_white': '#08519c',\n    'n_people_15to17_black': '#006d2c',\n    'n_people_15to17_indigenous': '#bea40d',\n    'n_people_15to17_asian': '#62367b',\n    'n_people_15to17_parda': '#a50f15',\n  };\n\n  Object.keys(layerTypes).forEach((layerId) => {\n    if (map.getLayer(layerId)) {\n      const colorScale = colorScales[activeVariable];\n      if (activeVariable === 'majority_race') {\n        console.log('Setting color scale for majority race layer'); // Add this log\n        map.setPaintProperty(layerId, layerTypes[layerId], [\n          'interpolate',\n          ['linear'],\n          ['get', 'majority_percentage'],\n          0, '#ffffff',\n          1, [\n            'match',\n            ['get', 'majority_race'],\n            'n_people_15to17_white', colorMap['n_people_15to17_white'],\n            'n_people_15to17_black', colorMap['n_people_15to17_black'],\n            'n_people_15to17_indigenous', colorMap['n_people_15to17_indigenous'],\n            'n_people_15to17_asian', colorMap['n_people_15to17_asian'],\n            'n_people_15to17_parda', colorMap['n_people_15to17_parda'],\n            '#ccc'\n          ]\n        ]);\n      }\n      else if (colorScale) {\n        console.log(`Setting color scale for layer ${layerId}`); // Add this log\n        map.setPaintProperty(layerId, layerTypes[layerId], colorScale);\n      } else {\n        console.error(`Color scale for ${activeVariable} is not defined`);\n      }\n    }\n  });\n};\n\n  handleButtonClick = (type) => {\n    const variableMap = {\n      Access: 'A_percentile',\n      Quality: 'Q_percentile',\n      'Access-Quality': 'H_percentile',\n      Population: 'P_percentile',\n      Income: 'avg_monthly_earnings_percentile',\n      Gender: 'pct_men_percentile',\n      Race: 'majority_race',\n    };\n    const newActiveVariable = variableMap[type];\n  \n    // Define labels based on the active variable\n    const labelsMap = {\n      'A_percentile': ['Poor', 'Adequate'],\n      'Q_percentile': ['Poor', 'Adequate'],\n      'H_percentile': ['Poor', 'Adequate'],\n      'P_percentile': ['Sparse', 'Dense'],\n      'avg_monthly_earnings_percentile': ['Low', 'High'],\n      'pct_men_percentile': ['Female', 'Male'],\n      'majority_race': ['White', 'Black', 'Indigenous', 'Asian', 'Parda'],\n    };\n    const newLabels = labelsMap[newActiveVariable];\n  \n    this.setState({\n      activeVariable: newActiveVariable,\n      colors: this.initializeColorScales()[newActiveVariable], // Update colors\n      labels: newLabels, // Update labels\n    });\n    this.props.onLayerChange(type); // Pass to parent component\n  };\n\n  // Render method\n  render() {\n    const { colors, labels } = this.state;\n    return (\n      <div className=\"map-wrapper\">\n        <div ref={this.mapContainer} className=\"map-container\" style={{ height: 'calc(100vh - 100px)' }} /> {/* Adjust height */}\n        <OverlayButtons onButtonClick={this.handleButtonClick} onLayerChange={this.props.onLayerChange} />\n        <Legend colors={colors} labels={labels} /> {/* Render Legend component */}\n      </div>\n    );\n  }\n}  \n\nexport default Map;\n","export const MAPBOX_ACCESS_TOKEN = 'pk.eyJ1IjoiZmVsaXBlaGx2byIsImEiOiJjbDNpNTRpMjkwMHJvM2JvOHZnZGdxNnR5In0.4OfuGp1nCZ0t_ugV7NQZng';","import React from 'react';\nimport './Footer.css';\n\nfunction Footer() {\n    return (\n        // Footer container with class \"footer-menu\"\n        <footer className=\"footer-menu\">\n            {/* Link to the GitHub repository */}\n            <a href=\"https://github.com/hordiienkoalina/access-to-education\" target=\"_blank\" rel=\"noopener noreferrer\">\n                <i className=\"fab fa-github\"></i> {/* GitHub icon */}\n            </a>\n            <span className=\"divider\">|</span> {/* Divider between links */}\n\n            {/* Link to the Methodology page */}\n            <a href=\"https://drive.google.com/file/d/1XcylVaGVecnlIRGluxcbrwDkYOeJ9owh/view?usp=sharing\" target=\"_blank\" rel=\"noopener noreferrer\">Methodology</a>\n            <span className=\"divider\">|</span> {/* Divider between links */}\n\n            {/* Link to the Data Download */}\n            <a href=\"https://drive.google.com/drive/folders/1mLUgjvGivuuT-pvkGqEP_5QEk8fQOyJq?usp=sharing\" target=\"_blank\" rel=\"noopener noreferrer\">Download Data</a>\n\n        </footer>\n    );\n}\n\nexport default Footer; // Export the Footer component as the default export","import React from 'react';\nimport './Header.css';\n\nconst Header = () => {\n    return (\n        // Header container with class \"header\"\n        <header className=\"header\">\n            <div className=\"header-content\">\n                {/* Main title of the header */}\n                <h1>Atlas Educação</h1>\n            </div>\n        </header>\n    );\n};\n\nexport default Header; // Export the Header component as the default export\n","import React from 'react'; // Import React library\nimport './Subheader.css'; // Import CSS for subheader\n\nconst Subheader = ({ title, description }) => {\n    return (\n        <div className=\"subheader\"> {/* Container for subheader */}\n            <h2>{title}</h2> {/* Subheader title */}\n            <p>{description}</p> {/* Subheader description */}\n        </div>\n    );\n};\n\nexport default Subheader; // Export the Subheader component as the default export","import React, { useState } from 'react';\nimport './Popup.css';\n\nconst Popup = ({ onClose }) => {\n  const [dontShowAgain, setDontShowAgain] = useState(false);\n\n  const handleCheckboxChange = (e) => {\n    setDontShowAgain(e.target.checked);\n  };\n\n  const handleClose = () => {\n    if (dontShowAgain) {\n      localStorage.setItem('popupClosed', 'true');\n    }\n    onClose();\n  };\n  return (\n    <div className=\"popup-overlay\">\n      <div className=\"popup-content\">\n        <button className=\"popup-close\" onClick={handleClose}>&times;</button>\n        <h2>Welcome to Atlas Educação</h2>\n        <p>Access to education is commonly associated with the cost and proximity of a school. While these are crucial factors, other elements like resource availability, classroom capacity, and education quality are equally pivotal. </p>\n        <p> The Atlas Educação uses the Demographic Census and the School Census to highlight which areas have inadequate access to public secondary education. Use the map to explore every neighborhood in Brazil to see which have the most and the least access to high-quality public high schools.</p>\n        <div>\n          <input\n            type=\"checkbox\"\n            id=\"dont-show-again\"\n            onChange={handleCheckboxChange}\n          />\n          <label htmlFor=\"dont-show-again\">Don't show this again</label>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Popup;\n","import React, { useState, useEffect } from 'react';\nimport Map from './components/Map';\nimport Footer from './components/Footer';\nimport Header from './components/Header';\nimport Subheader from './components/Subheader';\nimport Popup from './components/Popup'; // Import the Popup component\nimport './App.css';\n\nconst App = () => {\n  const [selectedLayer, setSelectedLayer] = useState('Access-Quality');\n  const [isPopupVisible, setIsPopupVisible] = useState(false); // State for the popup visibility\n\n  const handleLayerChange = (layer) => {\n    setSelectedLayer(layer);\n  };\n\n  const handleClosePopup = () => {\n    setIsPopupVisible(false);\n  };\n\n  const layerDescriptions = {\n    'Access': 'The spatial access to public high schools, considering supply and demand of schools and student preferences.',\n    'Quality': 'The quality of each school based on test scores and grade progression ratios.',\n    'Access-Quality': 'The spatial access to high-quality public high schools, considering supply and demand of schools, student preferences, and school quality.',\n    'Income': 'The monthly household earnings.',\n    'Gender': 'The gender distribution of the population.',\n    'Race': 'The racial distribution of the population.',\n  };\n\n  useEffect(() => {\n    // Check local storage to determine if popup should be shown\n    if (!localStorage.getItem('popupClosed')) {\n      setIsPopupVisible(true);\n    }\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <Header />\n      <div className=\"content\">\n        <Subheader \n          title={`${selectedLayer}`} \n          description={layerDescriptions[selectedLayer] || 'No description available.'} \n        />\n        <div className=\"map-container\">\n          <Map onLayerChange={handleLayerChange} />\n        </div>\n      </div>\n      <Footer />\n      {isPopupVisible && <Popup onClose={handleClosePopup} />} {/* Conditionally render the popup */}\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport { createRoot } from 'react-dom/client';\nimport App from './App';\nimport './index.css';\n\n// Get the root container element from the HTML\nconst container = document.getElementById('root');\n\n// Create a React root and render the App component into it\nconst root = createRoot(container); // Create a root with the container element\nroot.render(<App />);"],"sourceRoot":""}